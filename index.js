const express = require('express');
const nodemailer = require('nodemailer');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const port = 3000;

app.use(express.json());

// File paths for counters and mappings
const counterPath = path.join(__dirname, 'alertIdCounter.json');
const alertMappingPath = path.join(__dirname, 'alertMapping.json');

// GET endpoint for testing
app.get('/webhook', (req, res) => {
  console.log('GET request received');
  res.status(200).send("GET Reached");
});

// POST endpoint to handle webhook
app.post('/webhook', async (req, res) => {
  console.log('POST request received');
  try {
    const payload = req.body;
    console.log('Request Payload:', payload);

    const status = payload.status;
    let alertId = payload.alertId;

    if (status === 'resolved') {
      // On resolve, find the existing work item and close it
      if (!alertId) return res.status(400).send('Missing alertId for resolved alert');

      const workItemId = getWorkItemIdForAlertId(alertId);
      if (!workItemId) {
        console.log(`No matching ADO work item found for alertId: ${alertId}`);
        return res.status(404).send('No work item found for this resolved alert');
      }

      await closeWorkItemInAdo(workItemId);
      return res.status(200).send(`Resolved alert processed. ADO ticket ${workItemId} closed.`);
    }

    // Validate payload
    if (!payload.title || !payload.message) {
      return res.status(400).send('Invalid payload');
    }

    // Clean title and message
    let title = payload.title.replace(/\(.*\)/, '').trim();
    let message = payload.message.split('Annotations:')[0];
    message = message.replace(/Value: .*?(Messages_behind=\d+)/, 'Value: $1')
                     .replace(/(Messages_behind=\d+)/g, '<strong>$1</strong>');

    let summary = '';
    if (payload.commonAnnotations?.summary) {
      summary = payload.commonAnnotations.summary.trim();
    }

    if (status === 'firing' && summary) {
      message += `<br><strong>Summary:</strong> <span style="color: red;">${summary}</span>`;
    }

    // Generate alertId if not provided
    if (!alertId) {
      alertId = generateSequentialAlertId();
    }

    console.log('Generated or Received Alert ID:', alertId);

    // Send email
    await sendEmail(alertId, title, message);

    // Create ADO work item
    const workItemData = { title, description: message };
    const response = await createWorkItem(workItemData);
    const workItemId = response.data.id;
    console.log('Work item created:', workItemId);

    // Store mapping
    storeAlertWorkItemMapping(alertId, workItemId);

    res.status(200).send(`Alert email sent and work item created. Alert ID: ${alertId}`);
  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
    res.status(500).send('Error processing webhook');
  }
});

// Generate sequential alert ID like ALR-SWF-001
function generateSequentialAlertId() {
  const counterData = JSON.parse(fs.readFileSync(counterPath, 'utf8'));
  let lastId = counterData.lastId || 0;
  lastId += 1;
  fs.writeFileSync(counterPath, JSON.stringify({ lastId }));
  return `ALR-SWF-${String(lastId).padStart(3, '0')}`;
}

// Store alertId â†’ workItemId
function storeAlertWorkItemMapping(alertId, workItemId) {
  const mappings = JSON.parse(fs.readFileSync(alertMappingPath, 'utf8'));
  mappings[alertId] = workItemId;
  fs.writeFileSync(alertMappingPath, JSON.stringify(mappings));
}

// Retrieve workItemId by alertId
function getWorkItemIdForAlertId(alertId) {
  const mappings = JSON.parse(fs.readFileSync(alertMappingPath, 'utf8'));
  return mappings[alertId];
}

// Send email
async function sendEmail(alertId, title, message) {
  const transporter = nodemailer.createTransport({
    service: 'Outlook',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  message = message.replace(/Value:/g, '<strong>Value:</strong>')
                   .replace(/Labels:/g, '<strong>Labels:</strong>')
                   .replace(/ - /g, '<strong> - </strong>');

  const footer = `<br><br><strong><em>This Alert is Generated By Software Factory Team</em></strong>
                  <br><img src="https://mspmovil.com/en/wp-content/uploads/software-factory.png" alt="Software Factory Logo" width="142" height="60" />
                  <br><strong>Message ID:</strong> ${alertId}`;

  const recipients = [
    process.env.EMAIL_TO,
    process.env.EMAIL_TO_1,
    process.env.EMAIL_TO_2
  ].filter(Boolean).join(', ');

  const mailOptions = {
    from: process.env.EMAIL_FROM,
    to: recipients,
    subject: `${title}`,
    html: `<p><strong>Title:</strong> <b>${title}</b></p>
           <p><strong>Message:</strong></p>
           <pre style="white-space: pre-wrap;">${message}</pre>
           ${footer}`,
  };

  await transporter.sendMail(mailOptions);
  console.log(`Email sent successfully. Message ID: ${alertId}`);
}

// Create ADO work item
async function createWorkItem(workItemData) {
  const organization = 'TICMPL';
  const project = 'Training';
  const pat = process.env.PAT;
  const type = 'Bug';

  const url = `https://dev.azure.com/${organization}/${project}/_apis/wit/workitems/$${type}?api-version=6.0`;

  const workItemFields = [
    { op: 'add', path: '/fields/System.Title', value: workItemData.title },
    { op: 'add', path: '/fields/System.Description', value: workItemData.description },
  ];

  const config = {
    headers: {
      'Content-Type': 'application/json-patch+json',
      Authorization: `Basic ${Buffer.from(`:${pat}`).toString('base64')}`,
    },
  };

  return axios.post(url, workItemFields, config);
}

// Close ADO work item
async function closeWorkItemInAdo(workItemId) {
  const organization = 'TICMPL';
  const project = 'Training';
  const pat = process.env.PAT;

  const url = `https://dev.azure.com/${organization}/${project}/_apis/wit/workitems/${workItemId}?api-version=6.0`;

  const updatePayload = [
    {
      op: 'add',
      path: '/fields/System.State',
      value: 'Closed', // Change as per your ADO workflow
    }
  ];

  const config = {
    headers: {
      'Content-Type': 'application/json-patch+json',
      Authorization: `Basic ${Buffer.from(`:${pat}`).toString('base64')}`,
    },
  };

  return axios.patch(url, updatePayload, config);
}

// Start server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
